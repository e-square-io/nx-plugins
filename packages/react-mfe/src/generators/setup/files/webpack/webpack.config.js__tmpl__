const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');
const getNrwlReactWebpackConfig = require('@nrwl/react/plugins/webpack');
const mf = require('@angular-architects/module-federation/webpack');
const path = require('path');

/**
 * We use the NX_TSCONFIG_PATH environment variable when using the @nrwl/angular:webpack-browser
 * builder as it will generate a temporary tsconfig file which contains any required remappings of
 * shared libraries.
 * A remapping will occur when a library is buildable, as webpack needs to know the location of the
 * built files for the buildable library.
 * This NX_TSCONFIG_PATH environment variable is set by the @nrwl/angular:webpack-browser and it contains
 * the location of the generated temporary tsconfig file.
 */
const tsConfigPath =
  process.env.NX_TSCONFIG_PATH ??
  path.join(__dirname, '<%= offsetFromRoot %>tsconfig.base.json');

const workspaceRootPath = path.join(__dirname, '<%= offsetFromRoot %>');
const sharedMappings = new mf.SharedMappings();
sharedMappings.register(
  tsConfigPath,
  [
    /* mapped paths to share */
  ],
  workspaceRootPath
);

module.exports = (config) => {
  const nrwlReactWebpackConfig = getNrwlReactWebpackConfig(config);

  nrwlReactWebpackConfig.output = {
    ...nrwlReactWebpackConfig.output,
    uniqueName: "<%= name %>",
    publicPath: 'auto',
    scriptType: 'text/javascript',
  };

  nrwlReactWebpackConfig.optimization = {
    ...nrwlReactWebpackConfig.optimization,
    runtimeChunk: false,
  };

  nrwlReactWebpackConfig.resolve = {
    ...nrwlReactWebpackConfig.resolve,
    alias: {
      ...sharedMappings.getAliases(),
    },
  };

  nrwlReactWebpackConfig.plugins.push(
    new ModuleFederationPlugin({<% if(type === 'remote') { %>
      name: "<%= name %>",
      filename: "remoteEntry.js",
      exposes: {
        './Component': '<%= sourceRoot %>/src/app/remote-entry.tsx',
      },<% } %><% if(type === 'host') { %>
      remotes: {
        <% remotes.forEach(function(remote) { %>"<%= remote.remoteName %>": "<%= remote.remoteName %>@http://localhost:<%= remote.port %>/remoteEntry.js",<% }); %>
      },<% } %>
      shared: {<% sharedLibraries.forEach(function (lib) { %>
        "<%= lib %>": { singleton: true, strictVersion: true },<% }); %>
        ...sharedMappings.getDescriptors(),
      },
    }),
    sharedMappings.getPlugin(),
  );

  return nrwlReactWebpackConfig;
};
