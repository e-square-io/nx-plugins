name: Main Workflow

on:
  push:
    branches: [ main ]

jobs:
  setup:
    if: ${{ !contains(github.event.head_commit.message, 'skip ci') && !contains(github.event.head_commit.message, 'chore(release)') }}
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      hasChanges: ${{ steps.affected.outputs.hasChanges }}
      matrix: ${{ steps.affected.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: .npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci --cache .npm

      - name: Calculate Affected Projects
        uses: e-square-io/nx-affected-matrix@v1
        id: affected
        with:
          targets: 'test,build'

  execute:
    name: Run ${{ matrix.target }} ${{ matrix.bucket }}
    if: ${{ needs.setup.outputs.hasChanges == 'true' }}
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: .npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci --cache .npm

      - name: Run semantic-release locally
        id: release
        if: ${{ matrix.target == 'build' }}
        uses: ridedott/release-me-action@master
        with:
          release-branches: '["main"]'
          node-module: true
          dry-run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update package.json version
        if: ${{ matrix.target == 'build' && steps.release.outputs.released }}
        run: npm version --no-git-tag-version ${{ steps.release.outputs.version }}

      - name: Execute target
        uses: e-square-io/nx-distributed-task@v1
        id: execute
        with:
          target: ${{ matrix.target }}
          bucket: ${{ matrix.bucket }}
          projects: ${{ matrix.projects }}
          nxCloud: true

  coverage:
    name: Publish coverage
    runs-on: ubuntu-latest
    needs: [execute]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: test

      - uses: codecov/codecov-action@v1
        with:
          directory: ./coverage/packages/*

  release:
    name: Release version
    if: ${{ needs.setup.outputs.hasChanges }}
    runs-on: ubuntu-latest
    needs: [setup, execute]
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Obtain GitHub App Installation Access Token
        id: githubAppAuth
        run: |
          TOKEN="$(npx obtain-github-app-installation-access-token ci ${{ secrets.GH_AUTH_SECRET }})"
          echo "::add-mask::$TOKEN"
          echo "::set-output name=token::$TOKEN"
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Run semantic-release
        id: release
        uses: ridedott/release-me-action@master
        with:
          release-branches: '["main"]'
          node-module: true
        env:
          GITHUB_TOKEN: ${{ steps.githubAppAuth.outputs.token }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Setup Node
        if: steps.release.outputs.released == 'true'
        uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to NPM
        if: steps.release.outputs.released == 'true'
        run: |
          for path in ./dist/packages/*; do
            cd "$path" && npm version "${{ steps.release.outputs.version }}" --no-git-tag-version --allow-same-version && npm publish --access public && cd -
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
